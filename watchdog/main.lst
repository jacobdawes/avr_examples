   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               	.global	__vector_12
  12               	__vector_12:
  13               	.LFB6:
  14               		.file 1 "main.c"
   1:main.c        **** 
   2:main.c        **** // Watchdog Example
   3:main.c        **** // 3/4/5
   4:main.c        **** //
   5:main.c        **** // In this example, we implement a simple binary counter
   6:main.c        **** // 
   7:main.c        **** // If the counter is not incremented after a certain period of time,
   8:main.c        **** // the watchdog will first trigger an interrupt, flashing the lights on the port
   9:main.c        **** // 
  10:main.c        **** // The watchdog timer is configured while the flashing occurs
  11:main.c        **** // When this timer is done, the device will reset
  12:main.c        **** 
  13:main.c        **** 
  14:main.c        **** #include <avr/io.h>
  15:main.c        **** #include <avr/interrupt.h>
  16:main.c        **** #include <avr/wdt.h>
  17:main.c        **** #include <util/delay.h>
  18:main.c        **** 
  19:main.c        **** 
  20:main.c        **** 
  21:main.c        **** // Interrupt service routine for watchdog timer interrupt
  22:main.c        **** ISR(WDT_vect){
  15               		.loc 1 22 0
  16               		.cfi_startproc
  17 0000 1F92      		push r1
  18               	.LCFI0:
  19               		.cfi_def_cfa_offset 3
  20               		.cfi_offset 1, -2
  21 0002 0F92      		push r0
  22               	.LCFI1:
  23               		.cfi_def_cfa_offset 4
  24               		.cfi_offset 0, -3
  25 0004 0FB6      		in r0,__SREG__
  26 0006 0F92      		push r0
  27 0008 1124      		clr __zero_reg__
  28 000a 8F93      		push r24
  29               	.LCFI2:
  30               		.cfi_def_cfa_offset 5
  31               		.cfi_offset 24, -4
  32               	/* prologue: Signal */
  33               	/* frame size = 0 */
  34               	/* stack size = 4 */
  35               	.L__stack_usage = 4
  23:main.c        **** 
  24:main.c        ****     // Set all of the pins high as a warning
  25:main.c        ****     PORTB |= 0b00001111;
  36               		.loc 1 25 0
  37 000c 88B3      		in r24,0x18
  38 000e 8F60      		ori r24,lo8(15)
  39 0010 88BB      		out 0x18,r24
  40               	/* epilogue start */
  26:main.c        **** }
  41               		.loc 1 26 0
  42 0012 8F91      		pop r24
  43 0014 0F90      		pop r0
  44 0016 0FBE      		out __SREG__,r0
  45 0018 0F90      		pop r0
  46 001a 1F90      		pop r1
  47 001c 1895      		reti
  48               		.cfi_endproc
  49               	.LFE6:
  51               	.global	read_button
  53               	read_button:
  54               	.LFB7:
  27:main.c        **** 
  28:main.c        **** 
  29:main.c        **** 
  30:main.c        **** // Read pin value and output true/false result
  31:main.c        **** uint8_t read_button(uint8_t pin){
  55               		.loc 1 31 0
  56               		.cfi_startproc
  57               	.LVL0:
  58               	/* prologue: function */
  59               	/* frame size = 0 */
  60               	/* stack size = 0 */
  61               	.L__stack_usage = 0
  32:main.c        **** 
  33:main.c        ****     if(PINB&(1<<pin))
  62               		.loc 1 33 0
  63 001e 26B3      		in r18,0x16
  64 0020 30E0      		ldi r19,0
  65 0022 00C0      		rjmp 2f
  66               		1:
  67 0024 3595      		asr r19
  68 0026 2795      		ror r18
  69               		2:
  70 0028 8A95      		dec r24
  71 002a 02F4      		brpl 1b
  34:main.c        ****         return 1;
  35:main.c        ****     else
  36:main.c        ****         return 0;
  37:main.c        **** }
  72               		.loc 1 37 0
  73 002c 822F      		mov r24,r18
  74               	.LVL1:
  75 002e 8170      		andi r24,lo8(1)
  76 0030 0895      		ret
  77               		.cfi_endproc
  78               	.LFE7:
  80               	.global	wdt_config_int
  82               	wdt_config_int:
  83               	.LFB8:
  38:main.c        **** 
  39:main.c        **** 
  40:main.c        **** 
  41:main.c        **** // Configure watchdog in interrupt mode
  42:main.c        **** void wdt_config_int(){
  84               		.loc 1 42 0
  85               		.cfi_startproc
  86               	/* prologue: function */
  87               	/* frame size = 0 */
  88               	/* stack size = 0 */
  89               	.L__stack_usage = 0
  43:main.c        **** 
  44:main.c        ****     // Enable watchdog interrupts
  45:main.c        ****     WDTCR |= (1<<WDIE);
  90               		.loc 1 45 0
  91 0032 81B5      		in r24,0x21
  92 0034 8064      		ori r24,lo8(64)
  93 0036 81BD      		out 0x21,r24
  46:main.c        ****     // Set watchdog change enable bit before configuring prescaler bits
  47:main.c        ****     WDTCR |= (1<<WDCE);
  94               		.loc 1 47 0
  95 0038 81B5      		in r24,0x21
  96 003a 8061      		ori r24,lo8(16)
  97 003c 81BD      		out 0x21,r24
  48:main.c        ****     // Configure prescaler for a 4 second timeout
  49:main.c        ****     WDTCR |= (1<<WDP3);
  98               		.loc 1 49 0
  99 003e 81B5      		in r24,0x21
 100 0040 8062      		ori r24,lo8(32)
 101 0042 81BD      		out 0x21,r24
 102 0044 0895      		ret
 103               		.cfi_endproc
 104               	.LFE8:
 106               	.global	wdt_config_reset
 108               	wdt_config_reset:
 109               	.LFB9:
  50:main.c        **** }
  51:main.c        **** 
  52:main.c        **** 
  53:main.c        **** void wdt_config_reset(){
 110               		.loc 1 53 0
 111               		.cfi_startproc
 112               	/* prologue: function */
 113               	/* frame size = 0 */
 114               	/* stack size = 0 */
 115               	.L__stack_usage = 0
 116 0046 0895      		ret
 117               		.cfi_endproc
 118               	.LFE9:
 120               		.section	.text.startup,"ax",@progbits
 121               	.global	main
 123               	main:
 124               	.LFB10:
  54:main.c        **** 
  55:main.c        ****     //
  56:main.c        **** }
  57:main.c        **** 
  58:main.c        **** 
  59:main.c        **** 
  60:main.c        **** int main(){
 125               		.loc 1 60 0
 126               		.cfi_startproc
 127               	/* prologue: function */
 128               	/* frame size = 0 */
 129               	/* stack size = 0 */
 130               	.L__stack_usage = 0
 131               	.LVL2:
  61:main.c        **** 
  62:main.c        ****     // Local counter variable
  63:main.c        ****     uint8_t count = 0;
  64:main.c        **** 
  65:main.c        ****     // Initialize PB0-PB3 as output pins
  66:main.c        ****     DDRB = (1<<PB0)|(1<<PB1)|(1<<PB2)|(1<<PB3);
 132               		.loc 1 66 0
 133 0000 8FE0      		ldi r24,lo8(15)
 134 0002 87BB      		out 0x17,r24
  67:main.c        ****     // Initialize PB4 as an input pin (button)
  68:main.c        ****     DDRB &= ~(1<<PB4);
 135               		.loc 1 68 0
 136 0004 BC98      		cbi 0x17,4
  69:main.c        ****     PORTB = 0;
 137               		.loc 1 69 0
 138 0006 18BA      		out 0x18,__zero_reg__
  70:main.c        **** 
  71:main.c        ****     // Configure the watchdog timer to interrupt (not reset) after 4 seconds
  72:main.c        ****     sei();
 139               		.loc 1 72 0
 140               	/* #APP */
 141               	 ;  72 "main.c" 1
 142 0008 7894      		sei
 143               	 ;  0 "" 2
  73:main.c        ****     wdt_config_int();
 144               		.loc 1 73 0
 145               	/* #NOAPP */
 146 000a 00D0      		rcall wdt_config_int
 147               	.LVL3:
  63:main.c        ****     uint8_t count = 0;
 148               		.loc 1 63 0
 149 000c C0E0      		ldi r28,0
 150               	.LVL4:
 151               	.L7:
  74:main.c        **** 
  75:main.c        **** 
  76:main.c        ****     while(1){
  77:main.c        ****     
  78:main.c        ****     
  79:main.c        ****         // wait for a button press
  80:main.c        ****         while(read_button(PB4));
 152               		.loc 1 80 0 discriminator 1
 153 000e 84E0      		ldi r24,lo8(4)
 154 0010 00D0      		rcall read_button
 155               	.LVL5:
 156 0012 8111      		cpse r24,__zero_reg__
 157 0014 00C0      		rjmp .L7
  81:main.c        ****         wdt_reset();
 158               		.loc 1 81 0
 159               	/* #APP */
 160               	 ;  81 "main.c" 1
 161 0016 A895      		wdr
 162               	 ;  0 "" 2
 163               	.LVL6:
 164               	/* #NOAPP */
 165               	.LBB4:
 166               	.LBB5:
 167               		.file 2 "/usr/lib/avr/include/util/delay.h"
   1:/usr/lib/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib/avr/include/util/delay.h **** 
   6:/usr/lib/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib/avr/include/util/delay.h **** 
   9:/usr/lib/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib/avr/include/util/delay.h **** 
  12:/usr/lib/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib/avr/include/util/delay.h ****      distribution.
  16:/usr/lib/avr/include/util/delay.h **** 
  17:/usr/lib/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib/avr/include/util/delay.h **** 
  21:/usr/lib/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib/avr/include/util/delay.h **** 
  33:/usr/lib/avr/include/util/delay.h **** /* $Id: delay.h.in 2251 2011-09-14 08:20:33Z joerg_wunsch $ */
  34:/usr/lib/avr/include/util/delay.h **** 
  35:/usr/lib/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib/avr/include/util/delay.h **** 
  38:/usr/lib/avr/include/util/delay.h **** #ifndef __HAS_DELAY_CYCLES
  39:/usr/lib/avr/include/util/delay.h **** #define __HAS_DELAY_CYCLES 1
  40:/usr/lib/avr/include/util/delay.h **** #endif
  41:/usr/lib/avr/include/util/delay.h **** 
  42:/usr/lib/avr/include/util/delay.h **** #include <inttypes.h>
  43:/usr/lib/avr/include/util/delay.h **** #include <util/delay_basic.h>
  44:/usr/lib/avr/include/util/delay.h **** #include <math.h>
  45:/usr/lib/avr/include/util/delay.h **** 
  46:/usr/lib/avr/include/util/delay.h **** /** \file */
  47:/usr/lib/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  48:/usr/lib/avr/include/util/delay.h ****     \code
  49:/usr/lib/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  50:/usr/lib/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  51:/usr/lib/avr/include/util/delay.h ****     #include <util/delay.h>
  52:/usr/lib/avr/include/util/delay.h ****     \endcode
  53:/usr/lib/avr/include/util/delay.h **** 
  54:/usr/lib/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  55:/usr/lib/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  56:/usr/lib/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  57:/usr/lib/avr/include/util/delay.h ****     used.
  58:/usr/lib/avr/include/util/delay.h **** 
  59:/usr/lib/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  60:/usr/lib/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  61:/usr/lib/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  62:/usr/lib/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  63:/usr/lib/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  64:/usr/lib/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  65:/usr/lib/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  66:/usr/lib/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  67:/usr/lib/avr/include/util/delay.h **** 
  68:/usr/lib/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  69:/usr/lib/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  70:/usr/lib/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  71:/usr/lib/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  72:/usr/lib/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  73:/usr/lib/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  74:/usr/lib/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  75:/usr/lib/avr/include/util/delay.h ****     routines linked into the application.
  76:/usr/lib/avr/include/util/delay.h **** 
  77:/usr/lib/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  78:/usr/lib/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  79:/usr/lib/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  80:/usr/lib/avr/include/util/delay.h **** 
  81:/usr/lib/avr/include/util/delay.h **** */
  82:/usr/lib/avr/include/util/delay.h **** 
  83:/usr/lib/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  84:/usr/lib/avr/include/util/delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  85:/usr/lib/avr/include/util/delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  86:/usr/lib/avr/include/util/delay.h **** #endif
  87:/usr/lib/avr/include/util/delay.h **** 
  88:/usr/lib/avr/include/util/delay.h **** #ifndef F_CPU
  89:/usr/lib/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  90:/usr/lib/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  91:/usr/lib/avr/include/util/delay.h **** # define F_CPU 1000000UL
  92:/usr/lib/avr/include/util/delay.h **** #endif
  93:/usr/lib/avr/include/util/delay.h **** 
  94:/usr/lib/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
  95:/usr/lib/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  96:/usr/lib/avr/include/util/delay.h **** #endif
  97:/usr/lib/avr/include/util/delay.h **** 
  98:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
  99:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 100:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 101:/usr/lib/avr/include/util/delay.h **** #  include <math.h>
 102:/usr/lib/avr/include/util/delay.h **** #endif
 103:/usr/lib/avr/include/util/delay.h **** 
 104:/usr/lib/avr/include/util/delay.h **** /**
 105:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 106:/usr/lib/avr/include/util/delay.h **** 
 107:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 108:/usr/lib/avr/include/util/delay.h **** 
 109:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 110:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 111:/usr/lib/avr/include/util/delay.h **** 
 112:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 113:/usr/lib/avr/include/util/delay.h **** 
 114:/usr/lib/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 115:/usr/lib/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 116:/usr/lib/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 117:/usr/lib/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 118:/usr/lib/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 119:/usr/lib/avr/include/util/delay.h **** 
 120:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 121:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 122:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 123:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0ms.
 124:/usr/lib/avr/include/util/delay.h **** 
 125:/usr/lib/avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 126:/usr/lib/avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 127:/usr/lib/avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 128:/usr/lib/avr/include/util/delay.h **** 
 129:/usr/lib/avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 130:/usr/lib/avr/include/util/delay.h ****    to round down and round to closest integer.
 131:/usr/lib/avr/include/util/delay.h **** 
 132:/usr/lib/avr/include/util/delay.h ****    Note: The new implementation of _delay_ms(double __ms) with 
 133:/usr/lib/avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible. 
 134:/usr/lib/avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 135:/usr/lib/avr/include/util/delay.h ****    Also, the backward compatible
 136:/usr/lib/avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 137:/usr/lib/avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 138:/usr/lib/avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 139:/usr/lib/avr/include/util/delay.h **** 
 140:/usr/lib/avr/include/util/delay.h ****  */
 141:/usr/lib/avr/include/util/delay.h **** void
 142:/usr/lib/avr/include/util/delay.h **** _delay_ms(double __ms)
 143:/usr/lib/avr/include/util/delay.h **** {
 144:/usr/lib/avr/include/util/delay.h **** 	uint16_t __ticks;
 145:/usr/lib/avr/include/util/delay.h **** 	double __tmp ; 
 146:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 147:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 148:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 149:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 150:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 151:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 152:/usr/lib/avr/include/util/delay.h **** 
 153:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 154:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 155:/usr/lib/avr/include/util/delay.h **** 
 156:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 157:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 158:/usr/lib/avr/include/util/delay.h **** 
 159:/usr/lib/avr/include/util/delay.h **** 	#else
 160:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 161:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 162:/usr/lib/avr/include/util/delay.h **** 	#endif
 163:/usr/lib/avr/include/util/delay.h **** 
 164:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 168               		.loc 2 164 0
 169 0018 2FE7      		ldi r18,lo8(79999)
 170 001a 88E3      		ldi r24,hi8(79999)
 171 001c 91E0      		ldi r25,hlo8(79999)
 172 001e 2150      		1: subi r18,1
 173 0020 8040      		sbci r24,0
 174 0022 9040      		sbci r25,0
 175 0024 01F4      		brne 1b
 176 0026 00C0      		rjmp .
 177 0028 0000      		nop
 178               	.LBE5:
 179               	.LBE4:
  82:main.c        ****         _delay_ms(50);
  83:main.c        ****         // once the button press occurs, increment counter
  84:main.c        ****         if(count<16)
 180               		.loc 1 84 0
 181 002a C031      		cpi r28,lo8(16)
 182 002c 00F4      		brsh .L10
  85:main.c        ****             count++;
 183               		.loc 1 85 0
 184 002e CF5F      		subi r28,lo8(-(1))
 185               	.LVL7:
 186 0030 00C0      		rjmp .L8
 187               	.L10:
  86:main.c        ****         else
  87:main.c        ****             count = 0;
 188               		.loc 1 87 0
 189 0032 C0E0      		ldi r28,0
 190               	.LVL8:
 191               	.L8:
  88:main.c        **** 
  89:main.c        ****         // display count on output register
  90:main.c        ****         PORTB = count;
 192               		.loc 1 90 0
 193 0034 C8BB      		out 0x18,r28
  91:main.c        ****     }
 194               		.loc 1 91 0
 195 0036 00C0      		rjmp .L7
 196               		.cfi_endproc
 197               	.LFE10:
 199               		.text
 200               	.Letext0:
 201               		.file 3 "/usr/lib/avr/include/stdint.h"
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/ccqA5CXg.s:2      *ABS*:0000003e __SP_H__
     /tmp/ccqA5CXg.s:3      *ABS*:0000003d __SP_L__
     /tmp/ccqA5CXg.s:4      *ABS*:0000003f __SREG__
     /tmp/ccqA5CXg.s:5      *ABS*:00000000 __tmp_reg__
     /tmp/ccqA5CXg.s:6      *ABS*:00000001 __zero_reg__
     /tmp/ccqA5CXg.s:12     .text:00000000 __vector_12
     /tmp/ccqA5CXg.s:53     .text:0000001e read_button
     /tmp/ccqA5CXg.s:82     .text:00000032 wdt_config_int
     /tmp/ccqA5CXg.s:108    .text:00000046 wdt_config_reset
     /tmp/ccqA5CXg.s:123    .text.startup:00000000 main

NO UNDEFINED SYMBOLS
